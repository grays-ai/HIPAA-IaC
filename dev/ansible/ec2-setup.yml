# ec2-setup.yml: Configure an EC2 instance to run our Django app in a development environment.
# This configuration has been based on the implementation of the Django app in the compliance-django-app repo.
# See /compliance-backend/build/docker more details on how the Django app is run in a Docker container.
# useage:
# ansible-playbook \
# -e ecr_url=123456789012.dkr.ecr.us-east-1.amazonaws.com/app-ecr  \ # ECR url where app image is stored
# -e app_version=1.0.0 \ # Version of the application we want to pull from ECR
# -e django_debug=True \ # Django debug mode
# -e django_secret_key=secret \ # Django secret key
# -e django_allowed_hosts=* \ # Django allowed hosts
# -e django_sql_engine=django.db.backends.postgresql \ # Django SQL engine
# -e django_superuser_name=admin \ # Django superuser name
# -e django_superuser_password=admin \ # Django superuser password
# -e django_superuser_email=alex@banyan.computer \ # Django superuser email
# -e django_use_s3=FALSE \ # Whether or not to upload certs to S3
# -e django_aws_cert_bucket_name=certs \ # Django AWS cert bucket name
# -e django_aws_cert_bucket_region=us-east-1 \ # Django AWS cert bucket region
# -e django sql_database=postgres \ # Django SQL database
# -e django_sql_user=postgres \ # Django SQL user
# -e django_sql_password=postgres \ # Django SQL password
# -e django_sql_host=postgres \ # Django SQL host
# -e django_sql_port=5432 \ # Django SQL port
# /path/to/ec2-setup.yml # Path to this playbook from where you are running it
- become: yes
  hosts: all
  name: Configure our Ec2 instance to run a Dockerized Django app
  tasks:
    ### Install service dependencies ###
    - name: Update Yum
      yum:
        name: '*'
        state: latest
        update_cache: yes
      register: yum_update
    - name: Install Docker
      yum:
        name: docker
        state: present
      register: docker_install
    - name: Start Docker
      service:
        name: docker
        state: started
      register: docker_start
    - name: Add User to Docker Group
      user:
        name: ec2-user
        groups: docker
        append: yes
      register: docker_user
    - name: Install Python Docker
      pip:
        name: docker
        state: present
    - name: Enable Nginx from the AWS linux extras
      shell: amazon-linux-extras install nginx1.12 -y
      register: nginx_install

    ### Configure Environment for Nginx ###
    - name: Copy Nginx config file to the correct location
      copy:
        src: nginx.conf
        dest: /etc/nginx/nginx.conf
      register: nginx_copy
      notify:
        - restart nginx
    - name: Create directories to hold our static files
      file:
        path: /var/www/staticfiles
        state: directory
      register: staticfiles_dir
    - name: Give Nginx access to our static files
      file:
        path: /var/www/staticfiles
        state: directory
        mode: 0777
        owner: nginx
        group: nginx
      register: staticfiles_nginx
# Remember to uncomment these if you want nginx to serve uploaded content
#    - name: Create directories to hold our static files
#      file:
#        path: /var/www/certfiles
#        state: directory
#      register: certfiles_dir
#    - name: Give Nginx access to our static files
#      file:
#        path: /var/www/certfiles
#        state: directory
#        mode: 0777
#        owner: nginx
#        group: nginx
#      register: certfiles_nginx

    ### Pull and run our Dockerized Django app ###
    - name: Get ECR Login
      shell: aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_url }}
      register: ecr_login
    - name: Pull Django app from ECR
      community.docker.docker_image:
        name: "{{ ecr_url }}:{{ app_version }}"
        source: pull
    - name: Run App Container
      docker_container:
        name: compliance-django
        image: "{{ ecr_url }}:{{ app_version }}"
        state: started
        restart_policy: always
        # Configure Django
        env:
          DEBUG: "{{ django_debug }}"
          SECRET_KEY: "{{ django_secret_key }}"
          DJANGO_ALLOWED_HOSTS: "{{ django_allowed_hosts }}"
          SQL_ENGINE: "{{ django_sql_engine }}"
          DJANGO_SUPERUSER_USERNAME: "{{ django_superuser_username }}"
          DJANGO_SUPERUSER_PASSWORD: "{{ django_superuser_password }}"
          DJANGO_SUPERUSER_EMAIL: "{{ django_superuser_email }}"
          USE_S3: "{{ django_use_s3 }}"
          AWS_CERT_BUCKET_NAME: "{{ django_aws_cert_bucket_name }}"
          AWS_CERT_BUCKET_REGION: "{{ aws_region }}"
          SQL_DATABASE: "{{ django_sql_database }}"
          SQL_USER: "{{ django_sql_user }}"
          SQL_PASSWORD: "{{ django_sql_password }}"
          SQL_HOST: "{{ django_sql_host }}"
          SQL_PORT: "{{ django_sql_port }}"
        ports:
          - 8000:8000
        # Configure docker to share content with Nginx
        volumes:
          - /var/www/staticfiles:/home/app/web/staticfiles
        # Remember to uncomment these if you want nginx to serve uploaded content
        #          - /var/www/certfiles:/home/app/web/certfiles
        # Call the start script
        command: [ "./start.sh" ]
      register: "app_container_run"

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted



